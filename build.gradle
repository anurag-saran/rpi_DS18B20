apply plugin: 'java'

version = '1.0'

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        url "https://repo.eclipse.org/content/repositories/paho-releases"
    }
}

dependencies {
    compile 'org.eclipse.paho:org.eclipse.paho.client.mqttv3:1.0.2'
    compile 'com.pi4j:pi4j-core:1.0'
    compile 'com.pi4j:pi4j-device:1.0'
    //runtime fileTree(dir: 'libs', include: '*.jar')
    testCompile group: 'junit', name: 'junit', version: '4.11'
}

ext.commandString = { List<String> cmdLine->
    StringBuilder info = new StringBuilder();
    for (String s : cmdLine) {
        info.append(s);
        info.append(' ');
    }
    return info.toString();
}

task readTemp(type: JavaExec, dependsOn: classes) {
    main = 'org.jboss.summit2015.ds18b20.ReadTemperature'
    jvmArgs = ['-XX:+HeapDumpOnOutOfMemoryError']
    classpath sourceSets.main.runtimeClasspath
    classpath configurations.runtime
}
readTemp.doFirst {
    println(commandString(commandLine))
    println("Output:\n")
}

task readTempLoop(type: JavaExec, dependsOn: classes) {
    main = 'org.jboss.summit2015.ds18b20.ReadTemperature'
    args = ['100']
    jvmArgs = ['-XX:+HeapDumpOnOutOfMemoryError']
    classpath sourceSets.main.runtimeClasspath
    classpath configurations.runtime
}
readTempLoop.doFirst {
    println(commandString(commandLine))
    println("Output:\n")
}

task readTempLoopMQTT(type: JavaExec, dependsOn: classes) {
    main = 'org.jboss.summit2015.ds18b20.ReadTemperatureMQTT'
    args = ['100']
    jvmArgs = ['-XX:+HeapDumpOnOutOfMemoryError']
    classpath sourceSets.main.runtimeClasspath
    classpath configurations.runtime
}
readTempLoopMQTT.doFirst {
    println(commandString(commandLine))
    println("Output:\n")
}

task readMQTT(type: JavaExec, dependsOn: classes) {
    main = 'org.jboss.summit2015.ds18b20.MqttRead'
    args = ['100']
    if (project.hasProperty('deviceID')) {
        args(deviceID)
    }
    jvmArgs = ['-XX:+HeapDumpOnOutOfMemoryError']
    classpath sourceSets.main.runtimeClasspath
    classpath configurations.runtime
}
readMQTT.doFirst {
    println(commandString(commandLine))
    println("When running on a host other than the RaspberryPi, pass in -PdeviceID=28-xxx... where deviceID is the temperature sensor id\nOutput:\n")
}